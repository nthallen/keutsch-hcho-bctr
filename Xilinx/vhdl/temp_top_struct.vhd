-- VHDL Entity BCtr_lib.temp_top.symbol
--
-- Created:
--          by - nort.UNKNOWN (NORT-XPS14)
--          at - 19:45:10 01/24/2018
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.1 (Build 8)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

ENTITY temp_top IS
  GENERIC( 
    BASE_ADDR  : unsigned (15 DOWNTO 0)    := X"0000";
    ADDR_WIDTH : integer range 16 downto 8 := 8      -- 
  );
  PORT( 
    Addr      : IN     std_logic_vector (ADDR_WIDTH-1 DOWNTO 0);
    ExpRd     : IN     std_logic;
    ExpWr     : IN     std_logic;
    clk       : IN     std_logic;
    rst       : IN     std_logic;
    scl_i     : IN     std_logic;
    sda_i     : IN     std_logic;
    tap_ack2  : IN     std_logic;
    ExpAck    : OUT    std_logic;
    RData     : OUT    std_logic_vector (15 DOWNTO 0);
    scl_o     : OUT    std_logic;
    sda_o     : OUT    std_logic;
    tap_data2 : OUT    std_logic_vector (31 DOWNTO 0);
    tap_rdy2  : OUT    std_logic
  );

-- Declarations

END ENTITY temp_top ;

--
-- VHDL Architecture BCtr_lib.temp_top.struct
--
-- Created:
--          by - nort.UNKNOWN (NORT-XPS14)
--          at - 19:45:10 01/24/2018
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.1 (Build 8)
--

-- Generation properties:
--   Component declarations : yes
--   Configurations         : embedded statements
--                          : add pragmas
--                          : exclude view name
--   
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

-- LIBRARY BCtr_lib;

ARCHITECTURE struct OF temp_top IS

  -- Architecture declarations

  -- Internal signal declarations
  SIGNAL BdEn      : std_logic;
  SIGNAL RdEn      : std_logic;
  SIGNAL Sensor    : std_logic_vector(2 DOWNTO 0);
  SIGNAL Word      : std_logic_vector(1 DOWNTO 0);
  SIGNAL ack       : std_logic;
  SIGNAL brd_num   : std_logic_vector(2 DOWNTO 0);
  SIGNAL rd_data_o : std_logic_vector(31 DOWNTO 0);
  SIGNAL rdy       : std_logic;


  -- Component Declarations
  COMPONENT subbus_io
  GENERIC (
    USE_BD_WR_EN : std_logic := '0'
  );
  PORT (
    BdEn   : IN     std_logic;
    BdWrEn : IN     std_logic;
    ExpRd  : IN     std_logic;
    ExpWr  : IN     std_logic;
    F8M    : IN     std_logic;
    ExpAck : OUT    std_logic;
    RdEn   : OUT    std_logic;
    WrEn   : OUT    std_logic
  );
  END COMPONENT subbus_io;
  COMPONENT temp_acquire
  PORT (
    ack       : IN     std_logic ;
    clk       : IN     std_logic ;
    rst       : IN     std_logic ;
    scl_i     : IN     std_logic ;
    sda_i     : IN     std_logic ;
    brd_num   : OUT    std_logic_vector (2 DOWNTO 0);
    rd_data_o : OUT    std_logic_vector (31 DOWNTO 0);
    rdy       : OUT    std_logic ;
    scl_o     : OUT    std_logic ;
    sda_o     : OUT    std_logic 
  );
  END COMPONENT temp_acquire;
  COMPONENT temp_addr
  GENERIC (
    ADDR_WIDTH : integer range 16 downto 8 := 8;
    BASE_ADDR  : unsigned (15 DOWNTO 0)    := X"0000"
  );
  PORT (
    Addr   : IN     std_logic_vector (ADDR_WIDTH-1 DOWNTO 0);
    ExpRd  : IN     std_logic ;
    rst    : IN     std_logic ;
    BdEn   : OUT    std_logic ;
    Sensor : OUT    std_logic_vector (2 DOWNTO 0);
    Word   : OUT    std_logic_vector (1 DOWNTO 0);
    clk    : IN     std_logic 
  );
  END COMPONENT temp_addr;
  COMPONENT temp_avg
  PORT (
    RdEn      : IN     std_logic ;
    Sensor    : IN     std_logic_vector (2 DOWNTO 0);
    Word      : IN     std_logic_vector (1 DOWNTO 0);
    brd_num   : IN     std_logic_vector (2 DOWNTO 0);
    clk       : IN     std_logic ;
    rd_data_o : IN     std_logic_vector (31 DOWNTO 0);
    rdy       : IN     std_logic ;
    rst       : IN     std_logic ;
    RData     : OUT    std_logic_vector (15 DOWNTO 0);
    ack       : OUT    std_logic 
  );
  END COMPONENT temp_avg;
  COMPONENT temp_tap
  GENERIC (
    BRD_SEL : integer range 1 to 6 := 2
  );
  PORT (
    brd_num   : IN     std_logic_vector (2 DOWNTO 0);
    clk       : IN     std_logic;
    rd_data_o : IN     std_logic_vector (31 DOWNTO 0);
    rdy       : IN     std_logic;
    rst       : IN     std_logic;
    tap_ack   : IN     std_logic;
    tap_data  : OUT    std_logic_vector (31 DOWNTO 0);
    tap_rdy   : OUT    std_logic
  );
  END COMPONENT temp_tap;

  -- Optional embedded configurations
  -- pragma synthesis_off
-- FOR ALL : subbus_io USE ENTITY BCtr_lib.subbus_io;
-- FOR ALL : temp_acquire USE ENTITY BCtr_lib.temp_acquire;
-- FOR ALL : temp_addr USE ENTITY BCtr_lib.temp_addr;
-- FOR ALL : temp_avg USE ENTITY BCtr_lib.temp_avg;
-- FOR ALL : temp_tap USE ENTITY BCtr_lib.temp_tap;
  -- pragma synthesis_on


BEGIN

  -- Instance port mappings.
  subbus : subbus_io
    GENERIC MAP (
      USE_BD_WR_EN => '0'
    )
    PORT MAP (
      ExpRd  => ExpRd,
      ExpWr  => ExpWr,
      ExpAck => ExpAck,
      F8M    => clk,
      RdEn   => RdEn,
      WrEn   => OPEN,
      BdEn   => BdEn,
      BdWrEn => BdEn
    );
  acquire : temp_acquire
    PORT MAP (
      ack       => ack,
      clk       => clk,
      rst       => rst,
      scl_i     => scl_i,
      sda_i     => sda_i,
      brd_num   => brd_num,
      rd_data_o => rd_data_o,
      rdy       => rdy,
      scl_o     => scl_o,
      sda_o     => sda_o
    );
  tmp_addr : temp_addr
    GENERIC MAP (
      ADDR_WIDTH => 8,
      BASE_ADDR  => BASE_ADDR
    )
    PORT MAP (
      Addr   => Addr,
      ExpRd  => ExpRd,
      rst    => rst,
      BdEn   => BdEn,
      Sensor => Sensor,
      Word   => Word,
      clk    => clk
    );
  avg : temp_avg
    PORT MAP (
      RdEn      => RdEn,
      Sensor    => Sensor,
      Word      => Word,
      brd_num   => brd_num,
      clk       => clk,
      rd_data_o => rd_data_o,
      rdy       => rdy,
      rst       => rst,
      RData     => RData,
      ack       => ack
    );
  tap2 : temp_tap
    GENERIC MAP (
      BRD_SEL => 2
    )
    PORT MAP (
      brd_num   => brd_num,
      clk       => clk,
      rd_data_o => rd_data_o,
      rdy       => rdy,
      rst       => rst,
      tap_ack   => tap_ack2,
      tap_data  => tap_data2,
      tap_rdy   => tap_rdy2
    );

END ARCHITECTURE struct;
