--
-- VHDL Test Bench BCtr_lib.prdelay_tb.prdelay_tester
--
-- Created:
--          by - nort.UNKNOWN (NORT-XPS14)
--          at - 17:26:57 01/ 8/2017
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2016.1 (Build 8)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;


ENTITY prdelay_tb IS
   GENERIC (
      LFSR_WIDTH   : integer range 64 downto 4 := 41;
      OUTPUT_WIDTH : integer range 16 downto 4 := 9
   );
END prdelay_tb;


LIBRARY BCtr_lib;
USE BCtr_lib.ALL;


ARCHITECTURE rtl OF prdelay_tb IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL clk   : std_logic;
   SIGNAL rst   : std_logic;
   SIGNAL RE    : std_logic;
   SIGNAL Nbins : unsigned(OUTPUT_WIDTH-1 DOWNTO 0);
   SIGNAL SimDone : std_logic;


   -- Component declarations
   COMPONENT prdelay
      GENERIC (
         LFSR_WIDTH   : integer range 64 downto 4 := 41;
         OUTPUT_WIDTH : integer range 16 downto 4 := 9
      );
      PORT (
         clk   : IN     std_logic;
         rst   : IN     std_logic;
         RE    : IN     std_logic;
         Nbins : OUT    unsigned(OUTPUT_WIDTH-1 DOWNTO 0)
      );
   END COMPONENT;

   -- embedded configurations
   -- pragma synthesis_off
   FOR U_0 : prdelay USE ENTITY BCtr_lib.prdelay;
   -- pragma synthesis_on

BEGIN

   U_0 : prdelay
      GENERIC MAP (
         LFSR_WIDTH   => LFSR_WIDTH,
         OUTPUT_WIDTH => OUTPUT_WIDTH
      )
      PORT MAP (
         clk   => clk,
         rst   => rst,
         RE    => RE,
         Nbins => Nbins
      );


  f100m_clk : Process is
  Begin
    clk <= '0';
    -- pragma synthesis_off
    wait for 20 ns;
    while SimDone = '0' loop
      clk <= '1';
      wait for 5 ns;
      clk <= '0';
      wait for 5 ns;
    end loop;
    wait;
    -- pragma synthesis_on
  End Process;
  
  test_proc: Process is
    procedure wait_on_lfsr(N : integer) IS
    BEGIN
      for i in 1 to N loop
      -- pragma synthesis_off
        wait until clk'Event and clk = '1';
      -- pragma synthesis_on
      end loop;
      return;
    END wait_on_lfsr;
  Begin
    SimDone <= '0';
    rst <= '1';
    RE <= '0';
    -- pragma synthesis_off
    wait until clk'Event and clk = '1';
    wait until clk'Event and clk = '1';
    rst <= '0';
    wait until clk'Event and clk = '1';

    for j in 1 to 1000 loop
      wait_on_lfsr(333);
      RE <= '1';
      wait until clk'Event and clk = '1';
      RE <= '0';
    end loop;    
    SimDone <= '1';
    wait;
    -- pragma synthesis_on
  END PROCESS;

END rtl;